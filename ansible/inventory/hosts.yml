# Ansible Inventory for Vault SSH + PKI Demo
# This inventory shows how to use Vault SSH for authentication

# EC2 instances for initial setup (traditional SSH keys for provisioning)
ec2_instances:
  hosts:
    vault-pki-demo:
      ansible_host: "{{ ec2_public_ip | default('localhost') }}"
      ansible_user: ec2-user
      ansible_ssh_private_key_file: ~/.ssh/djoo-demo-ec2-keypair.pem
      vault_server_url: "{{ vault_addr }}"
  vars:
    # Use traditional SSH key for initial provisioning
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'

# EC2 instances managed via Vault SSH certificates (ongoing management)
vault_ssh_managed:
  hosts:
    vault-pki-demo-ssh:
      ansible_host: "{{ ec2_public_ip | default('localhost') }}"
      ansible_user: ansible-automation
      # Vault SSH certificate authentication
      ansible_ssh_private_key_file: ~/.ssh/vault-ssh-key
      ansible_ssh_certificate_file: ~/.ssh/vault-ssh-key-cert.pub
      vault_ssh_role: ansible-automation
  vars:
    # SSH certificate configuration
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o CertificateFile=~/.ssh/vault-ssh-key-cert.pub'
    vault_ssh_engine_path: ssh-client-signer
    vault_ssh_ttl: "1h"

# Example web servers (for demonstration)
webservers:
  hosts:
    web1.example.com:
      ansible_host: 192.168.1.10
    web2.example.com:
      ansible_host: 192.168.1.11
    web3.example.com:
      ansible_host: 192.168.1.12
  vars:
    ansible_user: ansible-automation
    ansible_ssh_private_key_file: ~/.ssh/vault-ssh-key
    ansible_ssh_certificate_file: ~/.ssh/vault-ssh-key-cert.pub

all:
  vars:
    # Vault configuration
    vault_addr: "https://djoo-test-vault-public-vault-a40e8748.a3bc1cae.z1.hashicorp.cloud:8200"
    vault_namespace: "admin"
    
    # PKI configuration
    vault_pki_path: "pki"
    vault_pki_role: "example-dot-com"
    
    # Application configuration
    app_domain: example.com
